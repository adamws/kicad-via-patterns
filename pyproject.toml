[build-system]
requires = [
  "hatchling>=1.18",
  "hatch-kicad",
  "hatch-vcs",
]
build-backend = "hatchling.build"

[project]
name = "kicad-via-patterns"
keywords = ["kicad", "via"]
requires-python = ">=3.8"
license = {text = "MIT"}
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Manufacturing",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: MIT License",
  "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)"
]
dynamic = ["version"]

[project.urls]
"Homepage" = "https://github.com/adamws/kicad-via-patterns"
"Bug Tracker" = "https://github.com/adamws/kicad-via-patterns/issues"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "source/_version.py"

[tool.hatch.build.targets.kicad-package]
name = "Via Patterns"
description = "Add vias using various patterns"
description_full = [
  "Add vias using various patterns"
]
identifier = "com.github.adamws.kicad-via-patterns"
author = { name = "adamws", web="https://adamws.github.io" }
status = "development"
kicad_version = "8.0"
sources = ["source"]
include = [
  "source/*.py",
  "source/icon.png",
]
icon = "resources/icon.png"
download_url = "https://adamws.github.io/kicad-plugin-template/{zip_name}"

[tool.hatch.build.targets.kicad-package.hooks.kicad-repository]
# use defauls

[tool.hatch.envs.default]
system-packages = true # for `pcbnew` module
dependencies = [
  "pytest",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src tests}"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.black]
target-version = ["py38"]
line-length = 88

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.per-file-ignores]
"source/plugin_action.py" = [
  "N802", # Ignore function names not in lowercase
]
"source/__main__.py" = [
  "T201", # Let us do simple prints in main
]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.pytest.ini_options]
testpaths = ["tests"]
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s"
log_cli_date_format = "%H:%M:%S"
